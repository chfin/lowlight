{"name":"Lowlight","tagline":"A simple syntax highlighter in Common Lisp","body":"# lowlight\r\n\r\nA simple syntax highlighter in Common Lisp based on a lexer and a parser.\r\n\r\n*Version 1.0 approaching!*\r\n\r\n## Features\r\n\r\nSee [here](example.html) for an example.\r\n\r\n* higlighting code in html spans\r\n* themable with css\r\n* string and file highlighting\r\n* highlight code in markdown blocks\r\n* simple and flexible highlighting engine\r\n* based on a lexer ([graylex]) and a parser ([cl-yacc])\r\n\r\n### Supported languages\r\n\r\n* Common Lisp\r\n\r\nI will probably support more languages in the future,\r\nbut you can also define your own language styles.\r\nAlso, patches to get your language style included are welcome.\r\n\r\n## Installation\r\n\r\nLowlight is already available in Quicklisp, but at the time of writing this\r\nyou will find an old version there.\r\nIf you want the latest version lowlight, please download the source and\r\nload it via ASDF (or as a local Quicklisp project), or make sure.\r\nYou know, that the Quicklisp version has been updated to the current version,\r\nif it defines a package `lowlight.1`.\r\n\r\n## Usage\r\n\r\nFor detailed documentation go [here](lowlight.html).\r\n\r\nAll lowlight functions and macros live in the package `lowlight`:\r\n\r\n```common-lisp\r\n(in-package #:lowlight)\r\n```\r\n\r\nTo highlight a string use `light`:\r\n\r\n```common-lisp\r\n(light :common-lisp \":bla\") ;=> \"<span class=\\\"keyword\\\">:bla</span>\"\r\n```\r\n\r\nIf you want to highlight a whole file, use `light-file`:\r\n```common-lisp\r\n(light-file :common-lisp \"~/lowlight.lisp\" :css \"github-colors.css\")\r\n```\r\n\r\n## Known Bugs an Limitations\r\n\r\n### Lexing problems\r\n\r\nAs lowlight uses [graylex] for lexing,\r\nit currently suffers from a bug related do the buffer size graylex uses.\r\nIf you experience Problems with the lexer not correctly recognizing tokens\r\nthat cross the 1024 or 2048 character border, try to increase the buffer size\r\n`lowlight:*lexer-buffer-size*`.\r\n\r\n### Parsing problems\r\n\r\nThe grammars that are created by `define-cfg-style` are ambiguous by design,\r\nso conflict warnings will be ignored by default. If you run into problems, please\r\nconsider using `define-simple-style` or tell me, how to create unambiguous grammars\r\nin `define-cfg-style`. Maybe I will provide a third macro to explicitly specify a\r\ncomplete cfg, so you can make sure it's unambiguous yourself (if anyone actually needs this).\r\n\r\n[graylex]: https://github.com/e-user/graylex\r\n[cl-yacc]: http://www.pps.univ-paris-diderot.fr/~jch%20/software/cl-yacc/","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}